{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nconst socket = new WebSocket(\"ws://192.168.8.100:8008/im\");\n\nlet websocket = user => {\n  socket.onopen = () => {\n    socket.send(JSON.stringify({\n      \"type\": \"login\",\n      \"uuid\": user.id,\n      \"content\": \"Hello Go WebSocket\",\n      \"username\": user.nickname\n    }));\n  };\n\n  socket.onmessage = msg => {\n    const data = JSON.parse(msg.data);\n\n    switch (data.type) {\n      case \"init\":\n        _message.success(\"服务器连接成功\");\n\n        break;\n\n      case \"login\":\n        _message.success(`${data.username} 进入群聊`);\n\n        break;\n\n      case \"message\":\n        var {\n          username,\n          content\n        } = data;\n\n        _message.success(`${username}: ${content}`);\n\n        break;\n\n      case \"private\":\n        var {\n          username,\n          content,\n          touuid\n        } = data;\n\n        if (touuid === uuid) {\n          const message = `<span style=\"color: red;\">${username}</span> 对你说: ${content}`;\n          acceptMessage(message);\n        }\n\n        break;\n\n      case \"logout\":\n        userlistDom(data.user_list);\n        system(`${data.username} 已下线`, \"error\");\n        break;\n    }\n  };\n\n  socket.onclose = event => {\n    console.log(\"Socket Closed Connection: \", event);\n  };\n\n  socket.onerror = error => {\n    console.log(\"Socket Error: \", error);\n  };\n};\n\nlet sendMsg = msg => {\n  console.log(\"sending msg: \", msg);\n  socket.send(msg);\n};\n\nexport { websocket, sendMsg };","map":{"version":3,"sources":["/Users/mr.bo/项目/React/react-im/src/utils/websocket.js"],"names":["socket","WebSocket","websocket","user","onopen","send","JSON","stringify","id","nickname","onmessage","msg","data","parse","type","success","username","content","touuid","uuid","message","acceptMessage","userlistDom","user_list","system","onclose","event","console","log","onerror","error","sendMsg"],"mappings":";;AAEA,MAAMA,MAAM,GAAG,IAAIC,SAAJ,CAAc,4BAAd,CAAf;;AACA,IAAIC,SAAS,GAAGC,IAAI,IAAI;AAEpBH,EAAAA,MAAM,CAACI,MAAP,GAAgB,MAAM;AAClBJ,IAAAA,MAAM,CAACK,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAe;AACvB,cAAQ,OADe;AAEvB,cAAQJ,IAAI,CAACK,EAFU;AAGvB,iBAAW,oBAHY;AAIvB,kBAAYL,IAAI,CAACM;AAJM,KAAf,CAAZ;AAMH,GAPD;;AASAT,EAAAA,MAAM,CAACU,SAAP,GAAmBC,GAAG,IAAI;AACtB,UAAMC,IAAI,GAAGN,IAAI,CAACO,KAAL,CAAWF,GAAG,CAACC,IAAf,CAAb;;AACA,YAAQA,IAAI,CAACE,IAAb;AACI,WAAK,MAAL;AACI,iBAAGC,OAAH,CAAW,SAAX;;AACA;;AACJ,WAAK,OAAL;AACI,iBAAGA,OAAH,CAAY,GAAEH,IAAI,CAACI,QAAS,OAA5B;;AACA;;AACJ,WAAK,SAAL;AACI,YAAI;AAAEA,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAAwBL,IAA5B;;AACA,iBAAGG,OAAH,CAAY,GAAEC,QAAS,KAAIC,OAAQ,EAAnC;;AACA;;AACJ,WAAK,SAAL;AACI,YAAI;AAAED,UAAAA,QAAF;AAAYC,UAAAA,OAAZ;AAAqBC,UAAAA;AAArB,YAA+BN,IAAnC;;AACA,YAAGM,MAAM,KAAKC,IAAd,EAAoB;AAChB,gBAAMC,OAAO,GAAI,6BAA4BJ,QAAS,gBAAeC,OAAQ,EAA7E;AACAI,UAAAA,aAAa,CAACD,OAAD,CAAb;AACH;;AACD;;AACJ,WAAK,QAAL;AACIE,QAAAA,WAAW,CAACV,IAAI,CAACW,SAAN,CAAX;AACAC,QAAAA,MAAM,CAAE,GAAEZ,IAAI,CAACI,QAAS,MAAlB,EAAyB,OAAzB,CAAN;AACA;AArBR;AAuBH,GAzBD;;AA2BAhB,EAAAA,MAAM,CAACyB,OAAP,GAAiBC,KAAK,IAAI;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACH,GAFD;;AAIA1B,EAAAA,MAAM,CAAC6B,OAAP,GAAiBC,KAAK,IAAI;AACtBH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BE,KAA9B;AACH,GAFD;AAGH,CA7CD;;AA+CA,IAAIC,OAAO,GAAGpB,GAAG,IAAI;AACjBgB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BjB,GAA7B;AACAX,EAAAA,MAAM,CAACK,IAAP,CAAYM,GAAZ;AACH,CAHD;;AAKA,SAAST,SAAT,EAAoB6B,OAApB","sourcesContent":["import { message as AM } from 'antd'\n\nconst socket = new WebSocket(\"ws://192.168.8.100:8008/im\")\nlet websocket = user => {\n\n    socket.onopen = () => {\n        socket.send(JSON.stringify({\n            \"type\": \"login\",\n            \"uuid\": user.id,\n            \"content\": \"Hello Go WebSocket\",\n            \"username\": user.nickname\n        }))\n    }\n\n    socket.onmessage = msg => {\n        const data = JSON.parse(msg.data)\n        switch (data.type) {\n            case \"init\":\n                AM.success(\"服务器连接成功\")\n                break;\n            case \"login\":\n                AM.success(`${data.username} 进入群聊`)\n                break;\n            case \"message\":\n                var { username, content } = data\n                AM.success(`${username}: ${content}`)\n                break;\n            case \"private\":\n                var { username, content, touuid} = data\n                if(touuid === uuid) {\n                    const message = `<span style=\"color: red;\">${username}</span> 对你说: ${content}`\n                    acceptMessage(message)\n                }\n                break;\n            case \"logout\":\n                userlistDom(data.user_list)\n                system(`${data.username} 已下线`, \"error\")\n                break;\n        }\n    }\n\n    socket.onclose = event => {\n        console.log(\"Socket Closed Connection: \", event)\n    }\n\n    socket.onerror = error => {\n        console.log(\"Socket Error: \", error)\n    }\n}\n\nlet sendMsg = msg => {\n    console.log(\"sending msg: \", msg)\n    socket.send(msg)\n}\n\nexport { websocket, sendMsg }"]},"metadata":{},"sourceType":"module"}