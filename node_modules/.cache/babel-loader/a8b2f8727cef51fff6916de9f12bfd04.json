{"ast":null,"code":"import\"antd/lib/notification/style\";import _notification from\"antd/lib/notification\";import\"antd/lib/message/style\";import _message from\"antd/lib/message\";import store from'../redux/store';import{modifyContacts}from'../redux/actions';var socket=null;function websocket(user){socket=new WebSocket(\"ws://127.0.0.1:8008/im\");socket.onopen=function(){socket.send(JSON.stringify({\"type\":\"login\",\"uuid\":user.id.toString(),\"content\":\"Hello Go WebSocket\",\"username\":user.nickname}));};socket.onmessage=function(msg){var data=JSON.parse(msg.data);var username=data.username,content=data.content,touuid=data.touuid;console.log(data);switch(data.type){case\"init\":break;case\"login\"://notification['success']({ message: `${data.username} 已连接` })\nbreak;case\"message\":_message.success(\"message\\uFF1A\".concat(username,\": \").concat(content));break;case\"private\":var contacts=store.getState().user.contacts;if(touuid===user.id.toString()){var findIndex=contacts.findIndex(function(item){return item.uid.toString()===touuid;});if(findIndex!==-1){contacts[findIndex].last=content.replace(/@\\S+/,' ');if(store.getState().chat.chatUserInfo.uid===parseInt(touuid)){contacts[findIndex].unread=0;}else{contacts[findIndex].unread++;}}// 待完善。。。\nstore.dispatch(modifyContacts(contacts));}break;case\"logout\":_notification['error']({message:\"\".concat(data.username,\" \\u5DF2\\u9000\\u51FA\\u8FDE\\u63A5\")});_message.success(data.uuid+\"已下线\");break;default:break;}};socket.onclose=function(event){// notification['error']({ message: `服务器已断开连接` });\nconsole.log(\"Socket Closed Connection: \",event);};socket.onerror=function(error){_notification['error']({message:\"\\u670D\\u52A1\\u5668\\u5DF2\\u65AD\\u5F00\\u8FDE\\u63A5\"});};}// 发送好友消息\nvar sendMsg=function sendMsg(msg,friend_id){console.log(\"sending msg:\",msg);socket.send(JSON.stringify({type:\"friendMessage\",data:{to_uid:friend_id,// 好友的ID\nmessage:msg}}));};export{websocket,sendMsg};","map":{"version":3,"sources":["/Users/mr.bo/项目/React/react-im的副本/src/utils/websocket.js"],"names":["store","modifyContacts","socket","websocket","user","WebSocket","onopen","send","JSON","stringify","id","toString","nickname","onmessage","msg","data","parse","username","content","touuid","console","log","type","success","contacts","getState","findIndex","item","uid","last","replace","chat","chatUserInfo","parseInt","unread","dispatch","message","uuid","onclose","event","onerror","error","sendMsg","friend_id","to_uid"],"mappings":"2JAEA,MAAOA,CAAAA,KAAP,KAAkB,gBAAlB,CACA,OAASC,cAAT,KAA+B,kBAA/B,CAEA,GAAIC,CAAAA,MAAM,CAAG,IAAb,CAEA,QAASC,CAAAA,SAAT,CAAmBC,IAAnB,CAAyB,CACrBF,MAAM,CAAG,GAAIG,CAAAA,SAAJ,CAAc,wBAAd,CAAT,CACAH,MAAM,CAACI,MAAP,CAAgB,UAAM,CAClBJ,MAAM,CAACK,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAe,CACvB,OAAQ,OADe,CAEvB,OAAQL,IAAI,CAACM,EAAL,CAAQC,QAAR,EAFe,CAGvB,UAAW,oBAHY,CAIvB,WAAYP,IAAI,CAACQ,QAJM,CAAf,CAAZ,EAMH,CAPD,CASAV,MAAM,CAACW,SAAP,CAAmB,SAAAC,GAAG,CAAI,CACtB,GAAMC,CAAAA,IAAI,CAAGP,IAAI,CAACQ,KAAL,CAAWF,GAAG,CAACC,IAAf,CAAb,CADsB,GAEdE,CAAAA,QAFc,CAEgBF,IAFhB,CAEdE,QAFc,CAEJC,OAFI,CAEgBH,IAFhB,CAEJG,OAFI,CAEKC,MAFL,CAEgBJ,IAFhB,CAEKI,MAFL,CAGtBC,OAAO,CAACC,GAAR,CAAYN,IAAZ,EACA,OAAQA,IAAI,CAACO,IAAb,EACI,IAAK,MAAL,CACI,MACJ,IAAK,OAAL,CACI;AACA,MACJ,IAAK,SAAL,CACI,SAAGC,OAAH,wBAAsBN,QAAtB,cAAmCC,OAAnC,GACA,MACJ,IAAK,SAAL,CACI,GAAIM,CAAAA,QAAQ,CAAGxB,KAAK,CAACyB,QAAN,GAAiBrB,IAAjB,CAAsBoB,QAArC,CACA,GAAGL,MAAM,GAAKf,IAAI,CAACM,EAAL,CAAQC,QAAR,EAAd,CAAkC,CAC9B,GAAMe,CAAAA,SAAS,CAAGF,QAAQ,CAACE,SAAT,CAAmB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,GAAL,CAASjB,QAAT,KAAwBQ,MAA5B,EAAvB,CAAlB,CACA,GAAGO,SAAS,GAAK,CAAC,CAAlB,CAAqB,CACjBF,QAAQ,CAACE,SAAD,CAAR,CAAoBG,IAApB,CAA2BX,OAAO,CAACY,OAAR,CAAgB,MAAhB,CAAwB,GAAxB,CAA3B,CACA,GAAG9B,KAAK,CAACyB,QAAN,GAAiBM,IAAjB,CAAsBC,YAAtB,CAAmCJ,GAAnC,GAA2CK,QAAQ,CAACd,MAAD,CAAtD,CAAgE,CAC5DK,QAAQ,CAACE,SAAD,CAAR,CAAoBQ,MAApB,CAA6B,CAA7B,CACH,CAFD,IAEO,CACHV,QAAQ,CAACE,SAAD,CAAR,CAAoBQ,MAApB,GACH,CACJ,CACD;AACAlC,KAAK,CAACmC,QAAN,CAAelC,cAAc,CAACuB,QAAD,CAA7B,EACH,CACD,MACJ,IAAK,QAAL,CACI,cAAa,OAAb,EAAsB,CAAEY,OAAO,WAAKrB,IAAI,CAACE,QAAV,mCAAT,CAAtB,EACA,SAAGM,OAAH,CAAWR,IAAI,CAACsB,IAAL,CAAY,KAAvB,EACA,MACJ,QACI,MA9BR,CAgCH,CApCD,CAsCAnC,MAAM,CAACoC,OAAP,CAAiB,SAAAC,KAAK,CAAI,CACtB;AACAnB,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CkB,KAA1C,EACH,CAHD,CAKArC,MAAM,CAACsC,OAAP,CAAiB,SAAAC,KAAK,CAAI,CACtB,cAAa,OAAb,EAAsB,CAAEL,OAAO,mDAAT,CAAtB,EACH,CAFD,CAGH,CAED;AACA,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAC5B,GAAD,CAAM6B,SAAN,CAAoB,CAChCvB,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BP,GAA5B,EACAZ,MAAM,CAACK,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAe,CACvBa,IAAI,CAAE,eADiB,CAEvBP,IAAI,CAAE,CACF6B,MAAM,CAAED,SADN,CACiB;AACnBP,OAAO,CAAEtB,GAFP,CAFiB,CAAf,CAAZ,EAOH,CATD,CAWA,OAASX,SAAT,CAAoBuC,OAApB","sourcesContent":["import { message as AM, notification } from 'antd'\n\nimport store from '../redux/store'\nimport { modifyContacts } from '../redux/actions'\n\nlet socket = null\n\nfunction websocket(user) {\n    socket = new WebSocket(\"ws://127.0.0.1:8008/im\")\n    socket.onopen = () => {\n        socket.send(JSON.stringify({\n            \"type\": \"login\",\n            \"uuid\": user.id.toString(),\n            \"content\": \"Hello Go WebSocket\",\n            \"username\": user.nickname\n        }))\n    }\n\n    socket.onmessage = msg => {\n        const data = JSON.parse(msg.data)\n        const { username, content, touuid } = data\n        console.log(data)\n        switch (data.type) {\n            case \"init\":\n                break\n            case \"login\":\n                //notification['success']({ message: `${data.username} 已连接` })\n                break\n            case \"message\":\n                AM.success(`message：${username}: ${content}`)\n                break\n            case \"private\":\n                var contacts = store.getState().user.contacts\n                if(touuid === user.id.toString()) {\n                    const findIndex = contacts.findIndex(item => item.uid.toString() === touuid)\n                    if(findIndex !== -1) {\n                        contacts[findIndex].last = content.replace(/@\\S+/, ' ')\n                        if(store.getState().chat.chatUserInfo.uid === parseInt(touuid)) {\n                            contacts[findIndex].unread = 0\n                        } else {\n                            contacts[findIndex].unread++\n                        }\n                    }\n                    // 待完善。。。\n                    store.dispatch(modifyContacts(contacts))\n                }\n                break\n            case \"logout\":\n                notification['error']({ message: `${data.username} 已退出连接` })\n                AM.success(data.uuid + \"已下线\")\n                break\n            default:\n                break\n        }\n    }\n\n    socket.onclose = event => {\n        // notification['error']({ message: `服务器已断开连接` });\n        console.log(\"Socket Closed Connection: \", event)\n    }\n\n    socket.onerror = error => {\n        notification['error']({ message: `服务器已断开连接` });\n    }\n}\n\n// 发送好友消息\nconst sendMsg = (msg, friend_id) => {\n    console.log(\"sending msg:\", msg)\n    socket.send(JSON.stringify({\n        type: \"friendMessage\",\n        data: {\n            to_uid: friend_id, // 好友的ID\n            message: msg\n        }\n    }))\n}\n\nexport { websocket, sendMsg }"]},"metadata":{},"sourceType":"module"}