{"ast":null,"code":"import \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nvar _jsxFileName = \"/Users/mr.bo/\\u9879\\u76EE/React/react-im/src/components/left-nav/index.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie';\nimport { Link, withRouter } from 'react-router-dom';\nimport menuList from '../../config/menuConfig';\nconst {\n  Sider\n} = _Layout;\n\nclass LeftNav extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      screenType: 'fullscreen-exit'\n    };\n\n    this.getMenuDom = () => {\n      return menuList.map(item => React.createElement(_Menu.Item, {\n        key: item.path,\n        title: item.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: item.path,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, item.unread ? React.createElement(_Badge, {\n        dot: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: item.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })) : React.createElement(_Icon, {\n        type: item.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))));\n    };\n\n    this.toSetting = () => {\n      this.props.history.push({\n        pathname: '/setting'\n      });\n    };\n\n    this.resetFullScreen = () => {\n      let screenType = Cookies.get('screenType');\n      console.log(screenType);\n\n      if (screenType) {\n        screenType = screenType === 'fullscreen' ? 'fullscreen-exit' : 'fullscreen';\n        this.setState({\n          screenType\n        });\n        Cookies.set('screenType', screenType);\n      }\n\n      return screenType;\n    };\n\n    this.setFullScreen = () => {\n      const screenType = this.resetFullScreen();\n      console.log(screenType);\n      this.props.parent.setState({\n        screenType\n      }); // window.location.reload() // 还是这样省事啊  哈哈\n    };\n  }\n\n  componentWillMount() {\n    this.menuDoms = this.getMenuDom();\n  }\n\n  componentDidMount() {\n    this.resetFullScreen();\n  }\n\n  render() {\n    const path = this.props.location.pathname;\n    const {\n      user: {\n        userInfo\n      }\n    } = this.props;\n    if (!userInfo) return null;\n    return React.createElement(Sider, {\n      className: \"left-nav\",\n      defaultCollapsed: \"true\",\n      collapsedWidth: \"68\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"user-avatar\",\n      onClick: this.toSetting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(_Avatar, {\n      shape: \"square\",\n      size: \"large\",\n      icon: \"user\",\n      src: userInfo.avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"menus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(_Menu, {\n      theme: \"dark\",\n      mode: \"inline\",\n      selectedKeys: [path],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, this.menuDoms)), React.createElement(\"div\", {\n      className: \"setting\",\n      style: {\n        bottom: \"90px\"\n      },\n      onClick: this.setFullScreen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: this.state.screenType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: ['setting', path === '/setting' ? 'active' : null].join(' '),\n      onClick: this.toSetting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: \"setting\",\n      theme: \"filled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}), {})(withRouter(LeftNav));","map":{"version":3,"sources":["/Users/mr.bo/项目/React/react-im/src/components/left-nav/index.jsx"],"names":["React","Component","connect","Cookies","Link","withRouter","menuList","Sider","LeftNav","state","screenType","getMenuDom","map","item","path","title","unread","icon","toSetting","props","history","push","pathname","resetFullScreen","get","console","log","setState","set","setFullScreen","parent","componentWillMount","menuDoms","componentDidMount","render","location","user","userInfo","avatar","bottom","join"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AAGA,OAAOC,QAAP,MAAqB,yBAArB;AACA,MAAM;AAAEC,EAAAA;AAAF,WAAN;;AAEA,MAAMC,OAAN,SAAsBP,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE5BQ,KAF4B,GAEpB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAFoB;;AAAA,SAuC5BC,UAvC4B,GAuCf,MAAM;AACf,aAAOL,QAAQ,CAACM,GAAT,CAAaC,IAAI,IACpB,0BAAM,IAAN;AAAW,QAAA,GAAG,EAAEA,IAAI,CAACC,IAArB;AAA2B,QAAA,KAAK,EAAED,IAAI,CAACE,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAEF,IAAI,CAACC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQD,IAAI,CAACG,MAAL,GACI;AAAO,QAAA,GAAG,EAAE,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkB;AAAM,QAAA,IAAI,EAAEH,IAAI,CAACI,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlB,CADJ,GAEA;AAAM,QAAA,IAAI,EAAEJ,IAAI,CAACI,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJR,CADJ,CADG,CAAP;AAWH,KAnD2B;;AAAA,SAqD5BC,SArD4B,GAqDhB,MAAM;AACd,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAxB;AACH,KAvD2B;;AAAA,SAyD5BC,eAzD4B,GAyDV,MAAM;AACpB,UAAIb,UAAU,GAAGP,OAAO,CAACqB,GAAR,CAAY,YAAZ,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAZ;;AACA,UAAGA,UAAH,EAAe;AACXA,QAAAA,UAAU,GAAGA,UAAU,KAAK,YAAf,GAA8B,iBAA9B,GAAkD,YAA/D;AACA,aAAKiB,QAAL,CAAc;AAAEjB,UAAAA;AAAF,SAAd;AACAP,QAAAA,OAAO,CAACyB,GAAR,CAAY,YAAZ,EAA0BlB,UAA1B;AACH;;AACD,aAAOA,UAAP;AACH,KAlE2B;;AAAA,SAoE5BmB,aApE4B,GAoEZ,MAAM;AAClB,YAAMnB,UAAU,GAAG,KAAKa,eAAL,EAAnB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAZ;AACA,WAAKS,KAAL,CAAWW,MAAX,CAAkBH,QAAlB,CAA2B;AAAEjB,QAAAA;AAAF,OAA3B,EAHkB,CAIlB;AACH,KAzE2B;AAAA;;AAI5BqB,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,QAAL,GAAgB,KAAKrB,UAAL,EAAhB;AACH;;AAEDsB,EAAAA,iBAAiB,GAAG;AAChB,SAAKV,eAAL;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACL,UAAMpB,IAAI,GAAG,KAAKK,KAAL,CAAWgB,QAAX,CAAoBb,QAAjC;AACA,UAAM;AAAEc,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AAAR,QAAyB,KAAKlB,KAApC;AACA,QAAI,CAACkB,QAAL,EAAe,OAAO,IAAP;AACf,WACI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,UAAjB;AAA4B,MAAA,gBAAgB,EAAC,MAA7C;AAAoD,MAAA,cAAc,EAAC,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,aAAd;AAA4B,MAAA,OAAO,EAAE,KAAKnB,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAuB,MAAA,IAAI,EAAC,OAA5B;AAAoC,MAAA,IAAI,EAAC,MAAzC;AAAgD,MAAA,GAAG,EAAEmB,QAAQ,CAACC,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,KAAK,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,QAAxB;AAAiC,MAAA,YAAY,EAAE,CAACxB,IAAD,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKkB,QADX,CADJ,CAJJ,EAUI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,KAAK,EAAE;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAhC;AAAmD,MAAA,OAAO,EAAE,KAAKV,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAVJ,EAaI;AAAK,MAAA,SAAS,EAAE,CAAC,SAAD,EAAYI,IAAI,KAAK,UAAT,GAAsB,QAAtB,GAAiC,IAA7C,EAAmD0B,IAAnD,CAAwD,GAAxD,CAAhB;AACK,MAAA,OAAO,EAAE,KAAKtB,SADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAbJ,CADJ;AAqBH;;AArC2B;;AA4EhC,eAAehB,OAAO,CAClBO,KAAK,KAAK;AAAE2B,EAAAA,IAAI,EAAE3B,KAAK,CAAC2B;AAAd,CAAL,CADa,EACe,EADf,CAAP,CAEb/B,UAAU,CAACG,OAAD,CAFG,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Cookies from 'js-cookie'\nimport { Link, withRouter } from 'react-router-dom'\nimport { Avatar, Icon, Menu, Layout, Badge } from 'antd'\n\nimport menuList from '../../config/menuConfig'\nconst { Sider } = Layout\n\nclass LeftNav extends Component {\n\n    state = { screenType: 'fullscreen-exit' }\n\n    componentWillMount() {\n        this.menuDoms = this.getMenuDom()\n    }\n\n    componentDidMount() {\n        this.resetFullScreen()\n    }\n\n    render() {\n        const path = this.props.location.pathname\n        const { user: { userInfo } } = this.props\n        if (!userInfo) return null\n        return (\n            <Sider className=\"left-nav\" defaultCollapsed=\"true\" collapsedWidth=\"68\">\n                <h2 className=\"user-avatar\" onClick={this.toSetting}>\n                    <Avatar shape=\"square\" size=\"large\" icon=\"user\" src={userInfo.avatar} />\n                </h2>\n                <div className=\"menus\">\n                    <Menu theme=\"dark\" mode=\"inline\" selectedKeys={[path]}>\n                        { this.menuDoms }\n                    </Menu>\n                </div>\n                {/* 全屏模式 */}\n                <div className=\"setting\" style={{ bottom: \"90px\"}} onClick={this.setFullScreen}>\n                    <Icon type={this.state.screenType} />\n                </div>\n                <div className={['setting', path === '/setting' ? 'active' : null].join(' ')}\n                     onClick={this.toSetting}\n                >\n                    <Icon type=\"setting\" theme=\"filled\" />\n                </div>\n            </Sider>\n        )\n    }\n\n    getMenuDom = () => {\n        return menuList.map(item => (\n            <Menu.Item key={item.path} title={item.title}>\n                <Link to={item.path}>\n                    {\n                        item.unread ?\n                            <Badge dot={true}><Icon type={item.icon} /></Badge> :\n                        <Icon type={item.icon} />\n                    }\n                </Link>\n            </Menu.Item>\n        ))\n    }\n\n    toSetting = () => {\n        this.props.history.push({pathname: '/setting'})\n    }\n\n    resetFullScreen = () => {\n        let screenType = Cookies.get('screenType')\n        console.log(screenType)\n        if(screenType) {\n            screenType = screenType === 'fullscreen' ? 'fullscreen-exit' : 'fullscreen'\n            this.setState({ screenType })\n            Cookies.set('screenType', screenType)\n        }\n        return screenType\n    }\n\n    setFullScreen = () => {\n        const screenType = this.resetFullScreen()\n        console.log(screenType)\n        this.props.parent.setState({ screenType })\n        // window.location.reload() // 还是这样省事啊  哈哈\n    }\n}\n\nexport default connect(\n    state => ({ user: state.user }), {}\n)(withRouter(LeftNav))\n"]},"metadata":{},"sourceType":"module"}