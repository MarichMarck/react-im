{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport store from '../redux/store';\nlet socket = null;\n\nfunction websocket(user) {\n  socket = new WebSocket(\"ws://127.0.0.1:8008/im\");\n\n  socket.onopen = () => {\n    socket.send(JSON.stringify({\n      \"type\": \"login\",\n      \"uuid\": user.id.toString(),\n      \"content\": \"Hello Go WebSocket\",\n      \"username\": user.nickname\n    }));\n  };\n\n  socket.onmessage = msg => {\n    const data = JSON.parse(msg.data);\n    const {\n      username,\n      content,\n      touuid\n    } = data;\n    console.log(data);\n    console.log(store.getState());\n\n    switch (data.type) {\n      case \"init\":\n        break;\n\n      case \"login\":\n        _notification['success']({\n          message: `${data.username} 已连接`\n        });\n\n        break;\n\n      case \"message\":\n        _message.success(`message：${username}: ${content}`);\n\n        break;\n\n      case \"private\":\n        if (touuid === user.id.toString()) {\n          _message.success(`private：${username}: ${content}`);\n        }\n\n        break;\n\n      case \"logout\":\n        _notification['error']({\n          message: `${data.username} 已退出连接`\n        });\n\n        _message.success(data.uuid + \"已下线\");\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  socket.onclose = event => {\n    // notification['error']({ message: `服务器已断开连接` });\n    console.log(\"Socket Closed Connection: \", event);\n  };\n\n  socket.onerror = error => {\n    _notification['error']({\n      message: `服务器已断开连接`\n    });\n  };\n}\n\nconst sendMsg = msg => {\n  console.log(\"sending msg: \", msg);\n  socket.send(msg);\n};\n\nexport { websocket, sendMsg };","map":{"version":3,"sources":["/Users/mr.bo/项目/React/react-im/src/utils/websocket.js"],"names":["store","socket","websocket","user","WebSocket","onopen","send","JSON","stringify","id","toString","nickname","onmessage","msg","data","parse","username","content","touuid","console","log","getState","type","message","success","uuid","onclose","event","onerror","error","sendMsg"],"mappings":";;;;AAEA,OAAOA,KAAP,MAAkB,gBAAlB;AAEA,IAAIC,MAAM,GAAG,IAAb;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrBF,EAAAA,MAAM,GAAG,IAAIG,SAAJ,CAAc,wBAAd,CAAT;;AACAH,EAAAA,MAAM,CAACI,MAAP,GAAgB,MAAM;AAClBJ,IAAAA,MAAM,CAACK,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAe;AACvB,cAAQ,OADe;AAEvB,cAAQL,IAAI,CAACM,EAAL,CAAQC,QAAR,EAFe;AAGvB,iBAAW,oBAHY;AAIvB,kBAAYP,IAAI,CAACQ;AAJM,KAAf,CAAZ;AAMH,GAPD;;AASAV,EAAAA,MAAM,CAACW,SAAP,GAAmBC,GAAG,IAAI;AACtB,UAAMC,IAAI,GAAGP,IAAI,CAACQ,KAAL,CAAWF,GAAG,CAACC,IAAf,CAAb;AACA,UAAM;AAAEE,MAAAA,QAAF;AAAYC,MAAAA,OAAZ;AAAqBC,MAAAA;AAArB,QAAgCJ,IAAtC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAK,CAACqB,QAAN,EAAZ;;AACA,YAAQP,IAAI,CAACQ,IAAb;AACI,WAAK,MAAL;AACI;;AACJ,WAAK,OAAL;AACI,sBAAa,SAAb,EAAwB;AAAEC,UAAAA,OAAO,EAAG,GAAET,IAAI,CAACE,QAAS;AAA5B,SAAxB;;AACA;;AACJ,WAAK,SAAL;AACI,iBAAGQ,OAAH,CAAY,WAAUR,QAAS,KAAIC,OAAQ,EAA3C;;AACA;;AACJ,WAAK,SAAL;AACI,YAAGC,MAAM,KAAKf,IAAI,CAACM,EAAL,CAAQC,QAAR,EAAd,EAAkC;AAC9B,mBAAGc,OAAH,CAAY,WAAUR,QAAS,KAAIC,OAAQ,EAA3C;AACH;;AACD;;AACJ,WAAK,QAAL;AACI,sBAAa,OAAb,EAAsB;AAAEM,UAAAA,OAAO,EAAG,GAAET,IAAI,CAACE,QAAS;AAA5B,SAAtB;;AACA,iBAAGQ,OAAH,CAAWV,IAAI,CAACW,IAAL,GAAY,KAAvB;;AACA;;AACJ;AACI;AAnBR;AAqBH,GA1BD;;AA4BAxB,EAAAA,MAAM,CAACyB,OAAP,GAAiBC,KAAK,IAAI;AACtB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CO,KAA1C;AACH,GAHD;;AAKA1B,EAAAA,MAAM,CAAC2B,OAAP,GAAiBC,KAAK,IAAI;AACtB,kBAAa,OAAb,EAAsB;AAAEN,MAAAA,OAAO,EAAG;AAAZ,KAAtB;AACH,GAFD;AAGH;;AAED,MAAMO,OAAO,GAAGjB,GAAG,IAAI;AACnBM,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,GAA7B;AACAZ,EAAAA,MAAM,CAACK,IAAP,CAAYO,GAAZ;AACH,CAHD;;AAKA,SAASX,SAAT,EAAoB4B,OAApB","sourcesContent":["import { message as AM, notification } from 'antd'\n\nimport store from '../redux/store'\n\nlet socket = null\n\nfunction websocket(user) {\n    socket = new WebSocket(\"ws://127.0.0.1:8008/im\")\n    socket.onopen = () => {\n        socket.send(JSON.stringify({\n            \"type\": \"login\",\n            \"uuid\": user.id.toString(),\n            \"content\": \"Hello Go WebSocket\",\n            \"username\": user.nickname\n        }))\n    }\n\n    socket.onmessage = msg => {\n        const data = JSON.parse(msg.data)\n        const { username, content, touuid } = data\n        console.log(data)\n        console.log(store.getState())\n        switch (data.type) {\n            case \"init\":\n                break\n            case \"login\":\n                notification['success']({ message: `${data.username} 已连接` })\n                break\n            case \"message\":\n                AM.success(`message：${username}: ${content}`)\n                break\n            case \"private\":\n                if(touuid === user.id.toString()) {\n                    AM.success(`private：${username}: ${content}`)\n                }\n                break\n            case \"logout\":\n                notification['error']({ message: `${data.username} 已退出连接` })\n                AM.success(data.uuid + \"已下线\")\n                break\n            default:\n                break\n        }\n    }\n\n    socket.onclose = event => {\n        // notification['error']({ message: `服务器已断开连接` });\n        console.log(\"Socket Closed Connection: \", event)\n    }\n\n    socket.onerror = error => {\n        notification['error']({ message: `服务器已断开连接` });\n    }\n}\n\nconst sendMsg = msg => {\n    console.log(\"sending msg: \", msg)\n    socket.send(msg)\n}\n\nexport { websocket, sendMsg }"]},"metadata":{},"sourceType":"module"}