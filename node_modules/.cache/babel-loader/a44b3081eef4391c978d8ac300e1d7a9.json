{"ast":null,"code":"import \"antd/lib/skeleton/style\";\nimport _Skeleton from \"antd/lib/skeleton\";\nimport \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nvar _jsxFileName = \"/Users/mr.bo/\\u9879\\u76EE/React/react-im/src/containers/chat/contacts/index.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport InputSearch from './search';\nimport { initChatInfo } from '../../../redux/actions';\n\nclass Contacts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      initLoading: true,\n      loading: false\n    };\n\n    this.showMessageByUid = uid => {\n      const {\n        list\n      } = this.state;\n      const index = list.findIndex(item => item.id === uid);\n      list[index].unread = 0;\n      this.props.initChatInfo(list[index]);\n    };\n  }\n\n  render() {\n    const {\n      initLoading\n    } = this.state;\n    const {\n      chat: {\n        chatUserInfo\n      },\n      user: {\n        contacts\n      }\n    } = this.props;\n    const {\n      uid\n    } = chatUserInfo;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(InputSearch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    })), React.createElement(_List, {\n      className: \"conversation-list\",\n      loading: initLoading,\n      itemLayout: \"horizontal\",\n      split: false,\n      dataSource: contacts,\n      renderItem: item => React.createElement(_List.Item, {\n        className: item.id === uid ? 'active' : null,\n        onClick: () => this.showMessageByUid(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(_Skeleton, {\n        avatar: true,\n        title: false,\n        loading: item.loading,\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(_List.Item.Meta, {\n        avatar: React.createElement(_Badge, {\n          count: item.unread,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, React.createElement(_Avatar, {\n          shape: \"square\",\n          size: \"large\",\n          src: item.avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        })),\n        title: item.nickname,\n        description: item.last_mess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"timeDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"02-24\"))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  chat: state.chat,\n  user: state.user\n}), {\n  initChatInfo\n})(Contacts);","map":{"version":3,"sources":["/Users/mr.bo/项目/React/react-im/src/containers/chat/contacts/index.jsx"],"names":["React","Component","connect","InputSearch","initChatInfo","Contacts","state","initLoading","loading","showMessageByUid","uid","list","index","findIndex","item","id","unread","props","render","chat","chatUserInfo","user","contacts","avatar","nickname","last_mess"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {List, Skeleton, Avatar, Badge} from 'antd'\nimport {connect} from 'react-redux'\nimport InputSearch from './search'\n\nimport {initChatInfo} from '../../../redux/actions'\n\nclass Contacts extends Component {\n\n    state = {initLoading: true, loading: false}\n\n    render() {\n        const {initLoading} = this.state\n        const {chat: {chatUserInfo}, user: {contacts}} = this.props\n        const {uid} = chatUserInfo\n        return (\n            <div>\n                <div className=\"user-search\"><InputSearch/></div>\n                <List className=\"conversation-list\" loading={initLoading} itemLayout=\"horizontal\"\n                      split={false} dataSource={contacts} renderItem={item =>\n                    (\n                        <List.Item\n                            className={item.id === uid ? 'active' : null}\n                            onClick={() => this.showMessageByUid(item.id)}\n                        >\n                            <Skeleton avatar title={false} loading={item.loading} active>\n                                <List.Item.Meta\n                                    avatar={\n                                        <Badge count={item.unread}>\n                                            <Avatar shape=\"square\" size=\"large\" src={item.avatar}/>\n                                        </Badge>\n                                    }\n                                    title={item.nickname}\n                                    description={item.last_mess}\n                                />\n                                <div className=\"timeDate\">02-24</div>\n                            </Skeleton>\n                        </List.Item>\n                    )}\n                />\n            </div>\n        )\n    }\n\n    showMessageByUid = uid => {\n        const {list} = this.state\n        const index = list.findIndex(item => item.id === uid)\n        list[index].unread = 0\n        this.props.initChatInfo(list[index])\n    }\n}\n\nexport default connect(\n    state => ({chat: state.chat, user: state.user}),\n    {initChatInfo}\n)(Contacts)"]},"metadata":{},"sourceType":"module"}